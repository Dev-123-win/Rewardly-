import \'package:flutter/material.dart\';\nimport \'package:firebase_auth/firebase_auth.dart\';\nimport \'package:cloud_firestore/cloud_firestore.dart\';\n\nclass AdminScreen extends StatelessWidget {\n  const AdminScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return DefaultTabController(\n      length: 2,\n      child: Scaffold(\n        appBar: AppBar(\n          title: const Text(\'Admin Panel\'),\n          bottom: const TabBar(\n            tabs: [\n              Tab(icon: Icon(Icons.people), text: \'Users\'),\n              Tab(icon: Icon(Icons.request_page), text: \'Withdrawals\'),\n            ],\n          ),\n        ),\n        body: const TabBarView(\n          children: [\n            UserList(),\n            WithdrawalList(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass UserList extends StatelessWidget {\n  const UserList({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return StreamBuilder<QuerySnapshot>(\n      stream: FirebaseFirestore.instance.collection(\'users\').snapshots(),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n        if (!snapshot.hasData) {\n          return const Center(child: Text(\'No users found.\'));\n        }\n\n        final users = snapshot.data!.docs;\n\n        return ListView.builder(\n          itemCount: users.length,\n          itemBuilder: (context, index) {\n            final user = users[index];\n            return ListTile(\n              title: Text(user[\'email\'] ?? \'No email\'),\n              subtitle: Text(\'Points: \${user[\'points\']}\'),\n            );\n          },\n        );\n      },\n    );\n  }\n}\n\nclass WithdrawalList extends StatelessWidget {\n  const WithdrawalList({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return StreamBuilder<QuerySnapshot>(\n      stream: FirebaseFirestore.instance\n          .collection(\'withdrawals\')\n          .where(\'status\', isEqualTo: \'pending\')\n          .snapshots(),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text(\'No pending withdrawals.\'));\n        }\n\n        final withdrawals = snapshot.data!.docs;\n\n        return ListView.builder(\n          itemCount: withdrawals.length,\n          itemBuilder: (context, index) {\n            final withdrawal = withdrawals[index];\n            final amount = withdrawal[\'amount\'];\n            final userId = withdrawal[\'userId\'];\n\n            return ListTile(\n              title: Text(\'Amount: \$amount\'),\n              subtitle: Text(\'User ID: \$userId\'),\n              trailing: Row(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  IconButton(\n                    icon: const Icon(Icons.check, color: Colors.green),\n                    onPressed: () {\n                      // Approve withdrawal\n                      FirebaseFirestore.instance\n                          .collection(\'withdrawals\')\n                          .doc(withdrawal.id)\n                          .update({\'status\': \'approved\'});\n                    },\n                  ),\n                  IconButton(\n                    icon: const Icon(Icons.close, color: Colors.red),\n                    onPressed: () {\n                      // Deny withdrawal\n                      FirebaseFirestore.instance\n                          .collection(\'withdrawals\')\n                          .doc(withdrawal.id)\n                          .update({\'status\': \'denied\'});\n                    },\n                  ),\n                ],\n              ),\n            );\n          },\n        );\n      },\n    );\n  }\n}\n